
function output = Problem1FlowDistribFunc(modifier) % create function Problem1FlowDistribFunc() that takes modifier as an input
    
    % define constants
    pipe_length = [6 4 4 6 4.472 2.828 2.828 2.828 2.828 2.828 2.828 4.472 20 0]';          % (m)
    pipe_diameter = [0.05 0.05 0.05 0.05 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.02 0.1 0.1]'; % (m)
    rho = 998;      % (kg/m^3)
    mu = 0.0013076; % (Pa*s)
    g = 9.81;       % (m/s^2)
    Qin = 100/1000; %m^3/s
       
    % sprink_flow_pc contains S1 - S5 as a percentage of Qin, calculated from the results of task 1
    sprink_flow_pc = [0.00809917355371901	0.0113388429752066	0.0145785123966942	0.0178181818181818	0.0210578512396694];
    section_in = Qin*(1-sprink_flow_pc(1));                      % flowrate into section 1
    sprink_section(1:4) = Qin * sprink_flow_pc(2:5) .* modifier; % calculate the flowrate through the section 1 sprinklers

    precision = 0.000001;                                        % the maximum allowable difference between q and Q
    difference = 1;                                              % any value above precision will work
    q = (ones(14, 1)/150);                                       % initial guess
    

    while difference > precision     % loops until (difference between q and Q) < precision

        Re = (4 * q * rho) ./ (pi * mu * pipe_diameter);         % reynolds number
        fric_coef = colebrook(abs(Re), 0);                       % use colebrook function to get fi

        % colebrook() only accepts positive Re, so abs(Re) is used
        % sign(Re) used when calculating K to re-introduce the sign of Re

        K = (8 * sign(Re) .* fric_coef .* pipe_length) ./ (pi^2 * g * (pipe_diameter.^5));
        D = 2 * K .* q;
        Dprime = -K .* q .^2;
        
        % system of equations set up in problem 1 
        system_matrix = [...
            1    0    0    0    1    0    0    0    0    0    0    0    1    0;...
            1   -1    0    0    0    1   -1    0    0    0    0    0    0    0;...
            0    1   -1    0    0    0    0    1   -1    0    0    0    0    0;...
            0    0    1   -1    0    0    0    0    0    1   -1    0    0    0;...
            0    0    0    1    0    0    0    0    0    0    0    1    1   -1;...
            0    0    0    0    1   -1    0    0    0    0    0    0    0    0;...
            0    0    0    0    0    0    1   -1    0    0    0    0    0    0;...
            0    0    0    0    0    0    0    0    1   -1    0    0    0    0;...
            0    0    0    0    0    0    0    0    0    0    1   -1    0    0;...
            D(1) 0    0    0 -D(5) -D(6)  0    0    0    0    0    0    0    0;...
            0   D(2)  0    0    0    0 -D(7) -D(8)  0    0    0    0    0    0;...
            0    0   D(3)  0    0    0    0    0 -D(9) -D(10) 0    0    0    0;...
            0    0    0   D(4)  0    0    0    0    0    0 -D(11) -D(12) 0   0;...
            D(1) D(2) D(3) D(4) 0    0    0    0    0    0    0    0  -D(13) 0];
        
        output_matrix = [...
            section_in;...
            0;...
            0;...
            0;...
            0;...
            sprink_section(1);...
            sprink_section(2);...
            sprink_section(3);...
            sprink_section(4);...
            Dprime(5)+Dprime(6)-Dprime(1);...
            Dprime(7)+Dprime(8)-Dprime(2);...
            Dprime(9)+Dprime(10)-Dprime(3);...
            Dprime(11)+Dprime(12)-Dprime(4);...
            Dprime(13)-Dprime(1)-Dprime(2)-Dprime(3)-Dprime(4)];
        
        Q = gaussPiv(system_matrix, output_matrix); % system of equations is solved using gaussian solve with pivoting
        difference = max(abs(Q-q));                 % calculate the maximum difference between individual values of Q and q
        q = Q;
        
    end
    output(1, :) = 1000*q;                          % flowrates are stored in the first column of the function output
    output(2, :) = (K .* q.^2);                     % headlosses are stored in the second column of the function output

end